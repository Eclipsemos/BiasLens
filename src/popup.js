document.addEventListener('DOMContentLoaded', function() {
    const analyzeBtn = document.getElementById('analyze-btn');
    const loadingDiv = document.getElementById('loading');
    const resultsDiv = document.getElementById('results');
    const errorDiv = document.getElementById('error');

    analyzeBtn.addEventListener('click', async function() {
        // Show loading state
        loadingDiv.classList.remove('hidden');
        resultsDiv.classList.add('hidden');
        errorDiv.classList.add('hidden');

        try {
            // Get the active tab
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            
            // Check if we're on a valid page
            if (!tab.url || tab.url.startsWith('chrome://') || tab.url.startsWith('edge://')) {
                throw new Error('Cannot analyze this page');
            }

            // Check if content script is available
            try {
                // Send message to content script to extract article content
                const response = await chrome.tabs.sendMessage(tab.id, { action: 'extractContent' });
                
                if (response && response.content) {
                    // TODO: Send content to LLM API for analysis
                    // For now, we'll just display the extracted content
                    document.getElementById('bias-analysis').textContent = 'Bias analysis will be implemented with LLM API';
                    document.getElementById('fact-check').textContent = 'Fact checking will be implemented with LLM API';
                    document.getElementById('summary').textContent = 'Summary will be generated by LLM API';
                    
                    // Search for opposite perspectives
                    const oppositePerspectives = await searchOppositePerspectives(response.content);
                    displayOppositePerspectives(oppositePerspectives);
                    
                    // Show results
                    loadingDiv.classList.add('hidden');
                    resultsDiv.classList.remove('hidden');
                    resultsDiv.classList.remove('fade-in'); 
                    void resultsDiv.offsetWidth; 
                    resultsDiv.classList.add('fade-in');
                } else {
                    throw new Error('No content extracted');
                }
            } catch (error) {
                if (error.message.includes('Receiving end does not exist')) {
                    throw new Error('Please refresh the page and try again');
                }
                throw error;
            }
        } catch (error) {
            console.error('Error:', error);
            loadingDiv.classList.add('hidden');
            errorDiv.classList.remove('hidden');
            errorDiv.querySelector('p').textContent = error.message;
        }
    });
});

async function searchOppositePerspectives(articleContent) {
    // TODO: Implement actual search using LLM API
    // For now, return mock data
    return [
        {
            title: "Opposing View: Climate Change Debate",
            url: "https://example.com/opposing-view-1",
            summary: "An alternative perspective on climate change policies"
        },
        {
            title: "Different Take: Economic Impact Analysis",
            url: "https://example.com/opposing-view-2",
            summary: "Alternative analysis of economic policies"
        },
        {
            title: "Counter Perspective: Social Policy",
            url: "https://example.com/opposing-view-3",
            summary: "Different viewpoint on social welfare programs"
        }
    ];
}

function displayOppositePerspectives(perspectives) {
    const container = document.querySelector('.perspective-links');
    container.innerHTML = ''; // Clear previous results

    perspectives.forEach(perspective => {
        const perspectiveDiv = document.createElement('div');
        perspectiveDiv.className = 'perspective-item';
        
        const titleLink = document.createElement('a');
        titleLink.href = perspective.url;
        titleLink.target = '_blank';
        titleLink.textContent = perspective.title;
        
        const summary = document.createElement('p');
        summary.textContent = perspective.summary;
        
        perspectiveDiv.appendChild(titleLink);
        perspectiveDiv.appendChild(summary);
        container.appendChild(perspectiveDiv);
    });
} 